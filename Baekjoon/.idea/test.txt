const fs = require("fs");
//백준 제출 할 때 주석 제거
// const readFileSyncAddress = "./dev/stdin";
// VSC 테스트 할때 주석 제거
const readFileSyncAddress = "example.txt";
//인풋 받기
let input = fs.readFileSync(readFileSyncAddress).toString().trim().split("\n");


- 아스키코드
    - str.charCodeAt() : 아스키코드 값으로 변환
    - 대문자 : 65 ~ 90 [A-Z(26개)]
        - 대문자 변환 : str.toUpperCase()
    - 소문자 : 97 ~ 122 [97-122(26개)]
        - 소문자 변환 : str.toLowerCase()


- 총합
  - array.reduce((cur,total) => total+=cur)

- 소숫점
   - str.toFixed(2) : 소숫점 둘째자리까지 출력

- Math
  - Math.ceil() : 올림
  - Math.floor() : 내림
  - Math.round() : 반올림

- 중복된 문자 찾기
    - str.indexOf('k') : return -> 위치를 찾아줌
    - str.indexOf('k',1) : return -> 1번 인덱스 이후로 부터 찾음

- Map
    - Map.set(key,value) : 값 변경
    - Map.get(key) : 값 가져오기
    - Array.form(Map.values()) : 배열로 변환

- Array
    - Array(10).fill(-1) : -1인 10개 배열

- string.splice(2,1) : 2인덱스~1개 삭제 (3번째거 삭제)
    - string.splice(2,1,'t') : 2인덱스~1개 삭제 후 't'문자열 넣음
    - string.substring(startIndex,endIndex) : startIndex ~ endIndex까지 삭제하고 return

- 정규식
    - [a-zA-Z].test() -> 정규식 맞으면 true / 틀리면 false
    - string.replace(/A/g,"#");

- 유클리드 호제법
    - 두수의 곱 / 최대공약수 -> 최소공배수
    - while (a % b !== 0){ let r = a % b if(r !== 0) { a = b; r = b } }

- 에라토스테네스의 체(소수) 1929
    - for(let i=2; i<=Math.sqrt(m); i++){
        if(arr[i])
            for(let j = i*i; j<=m; j+=i){
                arr[j] = false;
            }
    }

- 중복된 문자 없애기
    - for(let i = 0; i < 문자열.length; i++){
        // [문자열이 처음 나온 위치,인덱스]와 현재 인덱스,위치가 다르면 중복된 문자열이 있다.
        if(문자열.indexOf(문자열[i]) === i) answer+=문자열[i]
    }
